'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var hotkeys = _interopDefault(require('hotkeys-js'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var ShotcutContext = React.createContext();

var Shotcut =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Shotcut, _React$Component);

  function Shotcut() {
    _classCallCheck(this, Shotcut);

    return _possibleConstructorReturn(this, _getPrototypeOf(Shotcut).apply(this, arguments));
  }

  _createClass(Shotcut, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          shotcut = _this$props.shotcut,
          description = _this$props.description,
          handler = _this$props.handler;
      hotkeys(shotcut, handler);
      this.shotcutId = this.context.addShotcut({
        shotcut: shotcut,
        description: description
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.context.removeShotcut(this.shotcutId);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Shotcut;
}(React.Component);

Shotcut.contextType = ShotcutContext;
Shotcut.propTypes = {
  shotcut: PropTypes.string.isRequired,
  description: PropTypes.string.isRequired,
  handler: PropTypes.func.isRequired
};

var ShotcutProvider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ShotcutProvider, _React$Component);

  function ShotcutProvider() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ShotcutProvider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ShotcutProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "count", 0);

    _defineProperty(_assertThisInitialized(_this), "state", {
      shotcuts: []
    });

    _defineProperty(_assertThisInitialized(_this), "addShotcutHandler", function (shotcut) {
      _this.count++;
      var currCount = _this.count;

      _this.setState(function (_ref) {
        var shotcuts = _ref.shotcuts;
        return {
          shotcuts: [].concat(_toConsumableArray(shotcuts), [_objectSpread2({
            id: currCount
          }, shotcut)])
        };
      });

      return currCount;
    });

    _defineProperty(_assertThisInitialized(_this), "removeShotcutHandler", function (shotcutId) {
      _this.setState(function (_ref2) {
        var shotcuts = _ref2.shotcuts;
        return {
          shotcuts: shotcuts.filter(function (s) {
            return s.id !== shotcutId;
          })
        };
      });
    });

    return _this;
  }

  _createClass(ShotcutProvider, [{
    key: "render",
    value: function render() {
      var shotcuts = this.state.shotcuts;
      return React.createElement(ShotcutContext.Provider, {
        value: {
          shotcuts: shotcuts,
          addShotcut: this.addShotcutHandler,
          removeShotcut: this.removeShotcutHandler
        }
      }, this.props.children);
    }
  }]);

  return ShotcutProvider;
}(React.Component);

var withShotcuts = function withShotcuts(WrappedComponent) {
  var Component = React.forwardRef(function (props, ref) {
    return React.createElement(ShotcutContext.Consumer, null, function (_ref) {
      var shotcuts = _ref.shotcuts;
      return React.createElement(WrappedComponent, _extends({}, props, {
        shotcuts: shotcuts,
        ref: ref
      }));
    });
  });
  return Component;
};

module.exports = {
  Shotcut: Shotcut,
  ShotcutContext: ShotcutContext,
  ShotcutProvider: ShotcutProvider,
  withShotcuts: withShotcuts
};
